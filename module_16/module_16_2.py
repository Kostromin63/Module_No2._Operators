# Домашнее задание по теме "Валидация данных".
# Цель: научится писать необходимую валидацию для вводимых данных при помощи классов Path и Annotated.
#
# Задача "Аннотация и валидация":
from fastapi import FastAPI, Path
from typing import Annotated

app = FastAPI()


@app.get('/')
async def home_page() -> dict:
    """
    2.Создайте маршрут к главной странице - "/". По нему должно выводиться сообщение "Главная страница".
    :return:
    """
    return {"message": "Главная страница"}


@app.get('/user/admin')
async def admin() -> dict:
    """
    3.Создайте маршрут к странице администратора - "/user/admin".
    По нему должно выводиться сообщение "Вы вошли как администратор".
    :return:
    """
    return {"message": "Вы вошли как вдминистратор"}


# Допишите валидацию для маршрутов из предыдущей задачи при помощи классов Path и Annotated:
# '/user/{user_id}' - функция, выполняемая по этому маршруту, принимает аргумент user_id, для которого необходимо
# написать следующую валидацию:
# Должно быть целым числом
# Ограничено по значению: больше или равно 1 и меньше либо равно 100.
# Описание - 'Enter User ID'
# Пример - '1' (можете подставить свой пример не противоречащий валидации)
@app.get('/user/{user_id}')
async def user_by_id(user_id: Annotated[int, Path(ge=1, le=100, description='Enter User ID')]) -> dict:
    """
    4.Создайте маршрут к страницам пользователей используя параметр в пути - "/user/{user_id}".
    По нему должно выводиться сообщение "Вы вошли как пользователь № <user_id>".
    :param user_id:
    :return:
    """
    return {"message": f'Вы вошли как пользователь № {user_id}'}


# '/user' замените на '/user/{username}/{age}' - функция, выполняемая по этому маршруту, принимает
# аргументы username и age, для которых необходимо написать следующую валидацию:
# username - строка, age - целое число.
# username ограничение по длине: больше или равно 5 и меньше либо равно 20.
# age ограничение по значению: больше или равно 18 и меньше либо равно 120.
# Описания для username и age - 'Enter username' и 'Enter age' соответственно.
# Примеры для username и age - 'UrbanUser' и '24' соответственно.
# (можете подставить свои примеры не противоречащие валидации).
@app.get('/user/{username}/{age}')
async def user_info(username: Annotated[str, Path(min_length=5, max_length=20, description='Enter username')],
                    age: Annotated[int, Path(ge=18, le=120, description='Enter age')]) -> dict:
    """
    5.Создайте маршрут к страницам пользователей передавая данные в адресной строке - "/user".
    По нему должно выводиться сообщение "Информация о пользователе. Имя: <username>, Возраст: <age>".
    http://127.0.0.1:8000/user?username=Alexandr&age=60
    """
    return {"message": f"Инфформация о пользователе. Имя: {username}, Возраст: {age}"}

#
# Пример результата выполнения программы:
# Ошибки валидации для маршрутов '/user/{user_id}' и '/user/{username}/{age}' :
#
# Как должен выглядеть Swagger:
#
#
#
# Примечания:
# Если у вас не отображаются параметры Path, проверьте, сделали вы присвоение данных или подсказку типа.
# Верно: username: Annotated[...]. Не верно: username = Annotated[...]
# Файл module_16_2.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
# Успехов!
