# Домашнее задание по теме "Блокировки и обработка ошибок"
# Если вы решали старую версию задачи, проверка будет производиться по ней.
# Ссылка на старую версию тут.
# Цель: освоить блокировки потоков, используя объекты класса Lock и его методы.
#
# Задача "Банковские операции":
# Необходимо создать класс Bank со следующими свойствами:
#
import random
from decimal import *
from time import sleep
from threading import Thread, Lock

lock = Lock()


def get_random_number():
    random_number = Decimal(random.uniform(50, 500))
    random_number = random_number.quantize(Decimal("1.00"))
    return random_number


class Bank:
    """
    Атрибуты объекта:
    balance - баланс банка (int)
    lock - объект класса Lock для блокировки потоков.
    """
    # sum_debit = 0
    # sum_kredit = 0
    # control_balance = sum_kredit - sum_debit
    def __init__(self):
        self.balance = 0
        self.lock = lock

    def deposit(self):
        """
        Метод deposit:
        Будет совершать 100 транзакций пополнения средств.
        Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
        Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его
        методом release.
        После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
        Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
        :return:
        """

        for i in range(100):

            kredit = get_random_number()
            self.balance += kredit
            # self.sum_kredit += kredit
            print(f'Пополнение: {kredit}. Баланс: {self.balance}.')
            if self.balance >= 500 and lock.locked():
                lock.release()
            sleep(0.001)

    def take(self):
        """
        Метод take:
        Будет совершать 100 транзакций снятия.
        Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
        В начале должно выводится сообщение "Запрос на <случайное число>".
        Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие,
        уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>.
        Баланс: <текущий баланс>".
        Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и
        заблокировать поток методом acquiere.
        :return:
        """

        for i in range(100):
            with lock:
                debit = get_random_number()
                print(f'Запрос на {debit}.')
                if debit <= self.balance:
                    self.balance -= debit
                    # self.sum_debit += debit
                    print(f'Снятие: {debit}. Баланс: {self.balance}.')
                else:
                    print(f'Запрос отклонён, недостаточно средств')
                    lock.acquire()


# Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.
# После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".
#
# По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий, когда происходит
# попытка снятия при недостаточном балансе.
# Пример результата выполнения программы:
# Исходный код:
# class Bank:
# def __init__(self):
# ....
# def deposit(self):
# ...
# def take(self):
# ...
#

bk = Bank()

#
# # Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
th1 = Thread(target=Bank.deposit, args=(bk,))
th2 = Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()

th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
# print(f'Итого кредит: {bk.sum_kredit}')
# print(f'Итого дебет: {bk.sum_debit}')
# print(f'Контрольный баланс: {bk.sum_kredit - bk.sum_debit}')
#
# Вывод на консоль (может отличаться значениями, логика должна быть та же):
# Пополнение: 241. Баланс: 241
# Запрос на 174
# Снятие: 174. Баланс: 67
# Пополнение: 226. Баланс: 293
# Запрос на 421
# Запрос отклонён, недостаточно средств
# Пополнение: 133. Баланс: 426
# Запрос на 422
# Снятие: 422. Баланс: 4
# Пополнение: 150. Баланс: 154
# Запрос на 207
# Запрос отклонён, недостаточно средств
# ....
# Запрос на 431
# Снятие: 431. Баланс: 276
# Запрос на 288
# Запрос отклонён, недостаточно средств
# Итоговый баланс: 276
#
# Примечания:
# Для генерации случайного целого числа используйте функцию randint из модуля random.
# Для ожидания используйте функцию sleep из модуля time.
# Особо важно соблюсти верную блокировку: в take замок закрывается, в deposit открывается.
# Файл module_10_3.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
# Успехов!
