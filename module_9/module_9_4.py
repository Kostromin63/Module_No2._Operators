# Домашнее задание по теме "Создание функций на лету"
# Цель: освоить на практике замыкание, объекты-функторы и lambda-функции.
#
# Задача "Функциональное разнообразие":
# Lambda-функция:
# Даны 2 строки:
# first = 'Мама мыла раму'
# second = 'Рамена мало было'
# Необходимо составить lambda-функцию для следующего выражения - list(map(?, first, second)).
# Здесь ? - место написания lambda-функции.
#

import random


first = 'Мама мыла раму'
second = 'Рамена мало было'
print(list(map(lambda x, y: x == y, first, second)))


#
# Результатом должен быть список совпадения букв в той же позиции:
# [False, True, True, False, False, False, False, False, True, False, False, False, False, False]
# Где True - совпало, False - не совпало.
#
# Замыкание:
# Напишите функцию get_advanced_writer(file_name), принимающую название файла для записи.
# Внутри этой функции, напишите ещё одну - write_everything(*data_set), где *data_set - параметр принимающий
# неограниченное количество данных любого типа.
# Логика write_everything заключается в добавлении в файл file_name всех данных из data_set в том же виде.
# Функция get_advanced_writer возвращает функцию write_everything.


def get_advanced_writer(file_name):
    def write_everything(*data_set):
        file = open(file_name, 'w', encoding='utf-8')
        """
        В задании написано:"Логика write_everything заключается в ДОБАВЛЕНИИ в файл file_name всех данных из data_set"
        для такого действия режим открытия файла может быть "a", но в таком случае  в файл будут добавляться данные 
        столько раз, сколько раз будет вызыватся  функция с одними и теми же параметрами. Что бы этого не присходило,
        открываем в режиме "w", что бы файл очищался сам перед записью. Иначе надо было дописать код для очистки
        содержимого файла.
        """
        for i in data_set:
            file.write(str(i) + '\n')
        file.close()

    return write_everything


#
# Данный код:
write = get_advanced_writer('example.txt')
write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])
# Запишет данные в файл в таком виде:
#   Это строчка
#   ['А', 'это', 'уже', 'число', 5, 'в', 'списке']
#
# Метод __call__:
# Создайте класс MysticBall, объекты которого обладают атрибутом words хранящий коллекцию строк.
# В этом классе также определите метод __call__ который будет случайным образом выбирать слово из words и возвращать
# его. Для случайного выбора с одинаковой вероятностью для каждого данного в коллекции можете использовать функцию
# choice из модуля random.


class MysticBall:
    def __init__(self, *args):
        #  words =[args]
        self.words = args

    def __call__(self):
        i = random.choice(self.words)
        #   i = random.randrange(0, len(self.words) - 1)
        return i
#  self.words[i]


#
# Ваш код (количество слов для случайного выбора может быть другое):
# from random import choice
# # Ваш класс здесь
first_ball = MysticBall('Да', 'Нет', 'Наверное', 'Может быть', 'Да нет, этого не можжет быть')
print(first_ball())
print(first_ball())
print(first_ball())
# Примерный результат (может отличаться из-за случайности выбора):
# Да
# Да
# Наверное
